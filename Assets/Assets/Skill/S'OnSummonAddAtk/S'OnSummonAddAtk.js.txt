"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const csharp_1 = require("csharp");
const FullName_1 = require("FullName");
let newBuff = function () {
    let re = new csharp_1.Buff_Delegate();
    csharp_1.eve.SetBuffImageName(re, "-'Hero1");
    let toAdd = 0;
    re.A_setKV.AddAct((b, key, arg) => {
        if (key == csharp_1.nn.BuffUpgrade)
            toAdd++;
    });
    re.A_Apply.AddAct((b) => {
        let lastAtk = re.Up.unit.atk.Value_Base.Value;
        re.Up.unit.atk.SetValueBuffed(lastAtk + toAdd);
    });
    return re;
};
let create = function (a) {
    let re = new csharp_1.TriggerSkill_Delegate();
    re.onCall.AddAct((skill, call) => {
        if (call.Kind != csharp_1.CallKind.OnSummon)
            return;
        call.AddReactionAct(() => {
            var stackSkill = csharp_1.eve.CreatSkill(FullName_1.fullN.Skill.StackPauseTime_).Origin();
            csharp_1.eve.SetSkillImageName(stackSkill, "add atk");
            stackSkill.VarFloat(csharp_1.nn.TimeLeft, 0.6);
            stackSkill.runToBreak.AddFunc(() => {
                let key = re.ID + "|" + re.FullName;
                let to = csharp_1.eve.GetBuff(re.unit, key);
                if (to == null) {
                    to = newBuff();
                    csharp_1.eve.AddBuff(re.unit, to, key);
                    csharp_1.eve.WillApplyToData(to, to.Up.unit.atk);
                }
                to.SetKV(csharp_1.nn.BuffUpgrade, null);
                csharp_1.eve.AddNeedFreshData(skill.unit.atk);
                return csharp_1.SNResult.Exit;
            });
            csharp_1.eve.SetSkillUp(stackSkill, re.unit);
            csharp_1.eve.AddToStackSkillList(stackSkill);
        });
    });
    return re;
};
